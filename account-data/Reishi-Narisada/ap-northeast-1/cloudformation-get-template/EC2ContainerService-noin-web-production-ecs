{
    "StagesAvailable": [
        "Original",
        "Processed"
    ],
    "TemplateBody": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: >\n  AWS CloudFormation template to create a new VPC\n  or use an existing VPC for ECS deployment\n  in Create Cluster Wizard. Requires exactly 1\n  Instance Types for a Spot Request.\nParameters:\n  EcsClusterName:\n    Type: String\n    Description: >\n      Specifies the ECS Cluster Name with which the resources would be\n      associated\n    Default: default\n  EcsAmiId:\n    Type: String\n    Description: Specifies the AMI ID for your container instances.\n  EcsInstanceType:\n    Type: CommaDelimitedList\n    Description: >\n      Specifies the EC2 instance type for your container instances.\n      Defaults to m4.large\n    Default: m4.large\n    ConstraintDescription: must be a valid EC2 instance type.\n  KeyName:\n    Type: String\n    Description: >\n      Optional - Specifies the name of an existing Amazon EC2 key pair\n      to enable SSH access to the EC2 instances in your cluster.\n    Default: ''\n  VpcId:\n    Type: String\n    Description: >\n      Optional - Specifies the ID of an existing VPC in which to launch\n      your container instances. If you specify a VPC ID, you must specify a list of\n      existing subnets in that VPC. If you do not specify a VPC ID, a new VPC is created\n      with atleast 1 subnet.\n    Default: ''\n    ConstraintDescription: >\n      VPC Id must begin with 'vpc-' or leave blank to have a\n      new VPC created\n  SubnetIds:\n    Type: CommaDelimitedList\n    Description: >\n      Optional - Specifies the Comma separated list of existing VPC Subnet\n      Ids where ECS instances will run\n    Default: ''\n  SecurityGroupId:\n    Type: String\n    Description: >\n      Optional - Specifies the Security Group Id of an existing Security\n      Group. Leave blank to have a new Security Group created\n    Default: ''\n  VpcCidr:\n    Type: String\n    Description: Optional - Specifies the CIDR Block of VPC\n    Default: ''\n  SubnetCidr1:\n    Type: String\n    Description: Specifies the CIDR Block of Subnet 1\n    Default: ''\n  SubnetCidr2:\n    Type: String\n    Description: Specifies the CIDR Block of Subnet 2\n    Default: ''\n  SubnetCidr3:\n    Type: String\n    Description: Specifies the CIDR Block of Subnet 3\n    Default: ''\n  AsgMaxSize:\n    Type: Number\n    Description: >\n      Specifies the number of instances to launch and register to the cluster.\n      Defaults to 1.\n    Default: '1'\n  IamRoleInstanceProfile:\n    Type: String\n    Description: >\n      Specifies the Name or the Amazon Resource Name (ARN) of the instance\n      profile associated with the IAM role for the instance\n  SecurityIngressFromPort:\n    Type: Number\n    Description: >\n      Optional - Specifies the Start of Security Group port to open on\n      ECS instances - defaults to port 0\n    Default: '0'\n  SecurityIngressToPort:\n    Type: Number\n    Description: >\n      Optional - Specifies the End of Security Group port to open on ECS\n      instances - defaults to port 65535\n    Default: '65535'\n  SecurityIngressCidrIp:\n    Type: String\n    Description: >\n      Optional - Specifies the CIDR/IP range for Security Ports - defaults\n      to 0.0.0.0/0\n    Default: 0.0.0.0/0\n  EcsEndpoint:\n    Type: String\n    Description: >\n      Optional - Specifies the ECS Endpoint for the ECS Agent to connect to\n    Default: ''\n  VpcAvailabilityZones:\n    Type: CommaDelimitedList\n    Description: >\n      Specifies a comma-separated list of 3 VPC Availability Zones for\n      the creation of new subnets. These zones must have the available status.\n    Default: ''\n  EbsVolumeSize:\n    Type: Number\n    Description: >\n      Optional - Specifies the Size in GBs, of the newly created Amazon\n      Elastic Block Store (Amazon EBS) volume\n    Default: '0'\n  EbsVolumeType:\n    Type: String\n    Description: Optional - Specifies the Type of (Amazon EBS) volume\n    Default: ''\n    AllowedValues:\n      - ''\n      - standard\n      - io1\n      - gp2\n      - sc1\n      - st1\n    ConstraintDescription: Must be a valid EC2 volume type.\n  DeviceName:\n    Type: String\n    Description: Optional - Specifies the device mapping for the Volume\n  UseSpot:\n    Type: String\n    Default: 'false'\n  IamSpotFleetRoleArn:\n    Type: String\n    Default: ''\n  SpotPrice:\n    Type: String\n    Default: ''\n  SpotAllocationStrategy:\n    Type: String\n    Default: 'diversified'\n    AllowedValues:\n      - 'lowestPrice'\n      - 'diversified'\n  UserData:\n    Type: String\n  IsWindows:\n    Type: String\n    Default: 'false'\nConditions:\n  CreateEC2LCWithKeyPair:\n    !Not [!Equals [!Ref KeyName, '']]\n  SetEndpointToECSAgent:\n    !Not [!Equals [!Ref EcsEndpoint, '']]\n  CreateNewSecurityGroup:\n    !Equals [!Ref SecurityGroupId, '']\n  CreateNewVpc:\n    !Equals [!Ref VpcId, '']\n  CreateSubnet1: !And\n    - !Not [!Equals [!Ref SubnetCidr1, '']]\n    - !Condition CreateNewVpc\n  CreateSubnet2: !And\n    - !Not [!Equals [!Ref SubnetCidr2, '']]\n    - !Condition CreateSubnet1\n  CreateSubnet3: !And\n    - !Not [!Equals [!Ref SubnetCidr3, '']]\n    - !Condition CreateSubnet2\n  CreateWithSpot: !Equals [!Ref UseSpot, 'true']\n  CreateWithASG: !Not [!Condition CreateWithSpot]\n  CreateWithSpotPrice: !Not [!Equals [!Ref SpotPrice, '']]\nResources:\n  Vpc:\n    Condition: CreateSubnet1\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Ref VpcCidr\n      EnableDnsSupport: 'true'\n      EnableDnsHostnames: 'true'\n  PubSubnetAz1:\n    Condition: CreateSubnet1\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref Vpc\n      CidrBlock: !Ref SubnetCidr1\n      AvailabilityZone: !Select [ 0, !Ref VpcAvailabilityZones ]\n      MapPublicIpOnLaunch: true\n  PubSubnetAz2:\n    Condition: CreateSubnet2\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref Vpc\n      CidrBlock: !Ref SubnetCidr2\n      AvailabilityZone: !Select [ 1, !Ref VpcAvailabilityZones ]\n      MapPublicIpOnLaunch: true\n  PubSubnetAz3:\n    Condition: CreateSubnet3\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref Vpc\n      CidrBlock: !Ref SubnetCidr3\n      AvailabilityZone: !Select [ 2, !Ref VpcAvailabilityZones ]\n      MapPublicIpOnLaunch: true\n  InternetGateway:\n    Condition: CreateSubnet1\n    Type: AWS::EC2::InternetGateway\n  AttachGateway:\n    Condition: CreateSubnet1\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref Vpc\n      InternetGatewayId: !Ref InternetGateway\n  RouteViaIgw:\n    Condition: CreateSubnet1\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref Vpc\n  PublicRouteViaIgw:\n    Condition: CreateSubnet1\n    Type: AWS::EC2::Route\n    DependsOn: AttachGateway\n    Properties:\n      RouteTableId: !Ref RouteViaIgw\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n  PubSubnet1RouteTableAssociation:\n    Condition: CreateSubnet1\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PubSubnetAz1\n      RouteTableId: !Ref RouteViaIgw\n  PubSubnet2RouteTableAssociation:\n    Condition: CreateSubnet2\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PubSubnetAz2\n      RouteTableId: !Ref RouteViaIgw\n  PubSubnet3RouteTableAssociation:\n    Condition: CreateSubnet3\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PubSubnetAz3\n      RouteTableId: !Ref RouteViaIgw\n  EcsSecurityGroup:\n    Condition: CreateNewSecurityGroup\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: ECS Allowed Ports\n      VpcId: !If [ CreateSubnet1, !Ref Vpc, !Ref VpcId ]\n      SecurityGroupIngress:\n        IpProtocol: tcp\n        FromPort: !Ref SecurityIngressFromPort\n        ToPort: !Ref SecurityIngressToPort\n        CidrIp: !Ref SecurityIngressCidrIp\n  EcsInstanceLc:\n    Type: AWS::AutoScaling::LaunchConfiguration\n    Condition: CreateWithASG\n    Properties:\n      ImageId: !Ref EcsAmiId\n      InstanceType: !Select [ 0, !Ref EcsInstanceType ]\n      AssociatePublicIpAddress: true\n      IamInstanceProfile: !Ref IamRoleInstanceProfile\n      KeyName: !If [ CreateEC2LCWithKeyPair, !Ref KeyName, !Ref \"AWS::NoValue\" ]\n      SecurityGroups: [ !If [ CreateNewSecurityGroup, !Ref EcsSecurityGroup, !Ref SecurityGroupId ] ]\n      BlockDeviceMappings:\n      - DeviceName: !Ref DeviceName\n        Ebs:\n         VolumeSize: !Ref EbsVolumeSize\n         VolumeType: !Ref EbsVolumeType\n      UserData:\n        Fn::Base64: !Ref UserData\n  EcsInstanceAsg:\n    Type: AWS::AutoScaling::AutoScalingGroup\n    Condition: CreateWithASG\n    Properties:\n      VPCZoneIdentifier: !If\n        - CreateSubnet1\n        - !If\n          - CreateSubnet2\n          - !If\n            - CreateSubnet3\n            - [ !Sub \"${PubSubnetAz1}, ${PubSubnetAz2}, ${PubSubnetAz3}\" ]\n            - [ !Sub \"${PubSubnetAz1}, ${PubSubnetAz2}\" ]\n          - [ !Sub \"${PubSubnetAz1}\" ]\n        - !Ref SubnetIds\n      LaunchConfigurationName: !Ref EcsInstanceLc\n      MinSize: '0'\n      MaxSize: !Ref AsgMaxSize\n      DesiredCapacity: !Ref AsgMaxSize\n      Tags:\n        -\n          Key: Name\n          Value: !Sub \"ECS Instance - ${AWS::StackName}\"\n          PropagateAtLaunch: 'true'\n        -\n          Key: Description\n          Value: \"This instance is the part of the Auto Scaling group which was created through ECS Console\"\n          PropagateAtLaunch: 'true'\n  EcsSpotFleet:\n    Condition: CreateWithSpot\n    Type: AWS::EC2::SpotFleet\n    Properties:\n      SpotFleetRequestConfigData:\n        AllocationStrategy: !Ref SpotAllocationStrategy\n        IamFleetRole: !Ref IamSpotFleetRoleArn\n        TargetCapacity: !Ref AsgMaxSize\n        SpotPrice: !If [ CreateWithSpotPrice, !Ref SpotPrice, !Ref 'AWS::NoValue' ]\n        TerminateInstancesWithExpiration: true\n        LaunchSpecifications: \n            -\n              IamInstanceProfile:\n                Arn: !Ref IamRoleInstanceProfile\n              ImageId: !Ref EcsAmiId\n              InstanceType: !Select [ 0, !Ref EcsInstanceType ]\n              KeyName: !If [ CreateEC2LCWithKeyPair, !Ref KeyName, !Ref \"AWS::NoValue\" ]\n              Monitoring:\n                Enabled: true\n              SecurityGroups:\n                - GroupId: !If [ CreateNewSecurityGroup, !Ref EcsSecurityGroup, !Ref SecurityGroupId ]\n              SubnetId: !If\n                      - CreateSubnet1\n                      - !If\n                        - CreateSubnet2\n                        - !If\n                          - CreateSubnet3\n                          - !Join [ \",\" , [ !Ref PubSubnetAz1, !Ref PubSubnetAz2, !Ref PubSubnetAz3 ] ]\n                          - !Join [ \",\" , [ !Ref PubSubnetAz1, !Ref PubSubnetAz2 ] ]\n                        - !Ref PubSubnetAz1\n                      - !Join [ \",\" , !Ref SubnetIds ]\n              BlockDeviceMappings:\n                    - DeviceName: !Ref DeviceName\n                      Ebs:\n                       VolumeSize: !Ref EbsVolumeSize\n                       VolumeType: !Ref EbsVolumeType\n              UserData:\n                    Fn::Base64: !Ref UserData\nOutputs:\n  EcsInstanceAsgName:\n    Condition: CreateWithASG\n    Description: Auto Scaling Group Name for ECS Instances\n    Value: !Ref EcsInstanceAsg\n  EcsSpotFleetRequestId:\n      Condition: CreateWithSpot\n      Description: Spot Fleet Request for ECS Instances\n      Value: !Ref EcsSpotFleet\n  UsedByECSCreateCluster:\n    Description: Flag used by ECS Create Cluster Wizard\n    Value: 'true'\n  TemplateVersion:\n    Description: The version of the template used by Create Cluster Wizard\n    Value: '2.0.0'"
}